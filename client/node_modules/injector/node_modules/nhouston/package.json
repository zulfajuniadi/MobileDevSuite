{
  "name": "nhouston",
  "version": "2.0.2",
  "description": "Houston :: A simple static server based on node.js",
  "author": {
    "name": "Alejandro Morales",
    "email": "vamg008@gmail.com"
  },
  "dependencies": {
    "mime": "1.2.x",
    "colors": "~0.6.0-1",
    "marked": "~0.2.8",
    "spdy": "~1.2.1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/alejandro/Houston.git"
  },
  "bin": {
    "houston": "./bin/houston"
  },
  "preferGlobal": "true",
  "main": "./lib/server.js",
  "engines": ">0.7.x",
  "license": "MIT",
  "scripts": {
    "test": "node test/test-*.js"
  },
  "optionalDependencies": {
    "spdy": "~1.2.1"
  },
  "devDependencies": {
    "request": "latest"
  },
  "readme": "  # Houston :: A static files server based on node.js\r\n \r\nYet another static file server, simple as you hear.\r\n\r\nThe main purpose of Houston is to provide a static, 0 dependencies (just mime), server. \r\n\r\n**WARNING** Houston >1.0.x only runs on node-v0.8.x. The 0.6.x compatible version is 0.2.1 (`npm install -g nhouston@0.2.1`)\r\n\r\n## Features\r\n\r\nHouston initially was made to provide a cli-server. But the ability to create cli apps with custom servers make me re-think about this. Still Houston is a cli-server but with the followed features in order to you:\r\n\r\n-  static file server\r\n-  spdy, https support\r\n-  houston is an instance of a server, so you can tweak an put socket.io in from of it\r\n-  `cli: true` enable cli features like process.argv parser and more -> (houston#config)\r\n-  websockets support (see socket.io example)\r\n- If Houston can't handle the event it'll let you the task. (e.g. `houston.on('POST', function(req, res){/* the response code */}))`\r\n-  Custom Actions for Files. E.g. Markdown files rendered on the fly\r\n-  Extend method. Customized actions to files like:\r\n\r\n        \r\n        Houston.extend({\r\n                js: function (req, res) {                       \r\n                        var file = req.file\r\n                        res.end('w00t you requested ' + file)\r\n                }\r\n        })\r\n        \r\n        Houston.createServer(/* blah */)\r\n\r\n  curl http://myser.ver/path/to/a/js/file.js\r\n  => w00t you requested /path/to/a/js/file.js\r\n\r\n\r\n## Installation\r\n\r\nAsuming that you have installed [node.js](http://nodejs.org) and [npm](http://npmjs.org)\r\n    \r\n    > npm install -g nhouston\r\n\r\nOr:\r\n\r\n    > git clone https://github.com/alejandromg/Houston.git\r\n    > cd Houston\r\n    > ln -s bin/houston ~/bin\r\n    \r\n\r\nThen:\r\n   \r\n    # To start the server in the current dir \r\n    > houston \r\n\r\nThis will open a new window in your browser, or go to [http://localhost:8000/](http://localhost:8000/)\r\n\r\nTo start the server in a different port:\r\n\r\n    > sudo houston --port 80\r\n    > houston -p 8010\r\n    > houston -p=8010\r\n\r\nAll of them are valid, also you can define a different path:\r\n\r\n    > houston --path=/home/ --port=8010\r\n\r\nAlso you can avoid the new browser window with:\r\n\r\n    > houston -b false\r\n\r\n## Static server\r\n\r\nHouston, as well, has a static file server built-in. So if you want to use Houston as your static files provider use it as follows:\r\n\r\n    var houston = require('nhouston');\r\n    var server = houston(options);\r\n\r\nWhere options can be:\r\n\r\n    { \r\n      path : __dirname + '/public', // to serve files from public folder\r\n      port : 3001, // the port that houston will bind to listen\r\n      spdy : { // To create an spdy server (npm install spdy), this can be https too\r\n        key: fs.readFileSync(__dirname + '/keys/spdy-key.pem'),\r\n        cert: fs.readFileSync(__dirname + '/keys/spdy-cert.pem'),\r\n        ca: fs.readFileSync(__dirname + '/keys/spdy-csr.pem')\r\n      },\r\n      silent : true, // Log options: false as default\r\n      cli    : true, // to emule cli behavior (list files on dirs, open browser and more)\r\n    }\r\n\r\nSee more in the examples dir.\r\n\r\n## Screenshot\r\n\r\n<img src=\"http://dl.dropbox.com/u/29662133/Pantallazo-Houston%20%3A%3A%20-home-alejandromg-dev-blackbox%20-%20Google%20Chrome.png\" />\r\n\r\n## Help\r\n\r\n`houston -h`\r\n`houston --help`\r\n\r\n    Houston :: A cool static files server\r\n\r\n    Available options:\r\n       --port, -p    Listening port to Houston, default to 8000 \r\n       --path, -d    Dir of starting point to Houston, default to actual dir\r\n       --browser,-b  open browser window, (true,false) default to true\r\n       --help, -h    show this info\r\n       --version,-v  Show the current version of Houston\r\n\r\n    :: end of help ::\r\n\r\n## Alternatives\r\n\r\nFor sure that Houston is not the first option to static file servers, there are a bunch of other static file providers, with better support:\r\n\r\n-  [ecstatic](https://github.com/jesusabdullah/node-ecstatic)\r\n-  connect static middleware\r\n\r\nAnd many others.\r\n\r\n## Contributors\r\n\r\n- [Alejadro Morales](http://github.com/alejandromg)\r\n\r\n## License\r\n\r\nMIT\r\nAlejandro Morales (c) 2012",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/alejandro/Houston/issues"
  },
  "_id": "nhouston@2.0.2",
  "_from": "nhouston@"
}
