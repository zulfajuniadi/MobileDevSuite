{
  "name": "spdy",
  "version": "1.2.1",
  "description": "Implementation of the SPDY protocol on node.js.",
  "keywords": [
    "spdy"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/indutny/node-spdy.git"
  },
  "homepage": "https://github.com/indutny/node-spdy",
  "bugs": {
    "url": "https://github.com/indunty/node-spdy/issues",
    "email": "node-spdy+bugs@indutny.com"
  },
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor.indutny@gmail.com"
  },
  "contributors": [
    {
      "name": "Chris Storm",
      "email": "github@eeecooks.com"
    },
    {
      "name": "François de Metz",
      "email": "francois@2metz.fr"
    }
  ],
  "dependencies": {},
  "devDependencies": {
    "mocha": "1.2.x"
  },
  "scripts": {
    "test": "mocha --ui tdd --growl --reporter spec test/unit/*-test.js"
  },
  "engines": [
    "node >= 0.7.0"
  ],
  "main": "./lib/spdy",
  "optionalDependencies": {},
  "readme": "# SPDY Server for node.js [![Build Status](https://secure.travis-ci.org/indutny/node-spdy.png)](http://travis-ci.org/indutny/node-spdy)\n\nWith this module you can create [SPDY](http://www.chromium.org/spdy) servers\nin node.js with natural http module interface and fallback to regular https\n(for browsers that doesn't support SPDY yet).\n\n## Node+OpenSSL building\n\nAt the moment node-spdy requires zlib dictionary support, which will come to\nnode.js only in 0.7.x version. To build 0.7.x version follow instructions below:\n\n```bash\ngit clone git://github.com/joyent/node.git\ncd node\n./configure --prefix=$HOME/.node/dev # <- or any other dir\n\nmake install -j4 # in -jN, N is number of CPU cores on your machine\n\n# Add node's bin to PATH env variable\necho 'export PATH=$HOME/.node/dev/bin:$PATH' >> ~/.bashrc\n\n#\n# You have working node 0.7.x + NPN now !!!\n#\n```\n\n## Usage\n\n```javascript\nvar spdy = require('spdy'),\n    fs = require('fs');\n\nvar options = {\n  key: fs.readFileSync(__dirname + '/keys/spdy-key.pem'),\n  cert: fs.readFileSync(__dirname + '/keys/spdy-cert.pem'),\n  ca: fs.readFileSync(__dirname + '/keys/spdy-csr.pem')\n};\n\nvar server = spdy.createServer(options, function(req, res) {\n  res.writeHead(200);\n  res.end('hello world!');\n});\n\nserver.listen(443);\n```\n\n## API\n\nAPI is compatible with `http` and `https` module, but you can use another\nfunction as base class for SPDYServer. For example,\n`require('express').HTTPSServer` given that as base class you'll get a server\ncompatible with [express](https://github.com/visionmedia/express) API.\n\n```javascript\nspdy.createServer(\n  [base class constructor, i.e. https.Server or express.HTTPSServer],\n  { /* keys and options */ }, // <- the only one required argument\n  [request listener]\n).listen([port], [host], [callback]);\n```\n\nRequest listener will receive two arguments: `request` and `response`. They're\nboth instances of `http`'s `IncomingMessage` and `OutgoingMessage`. But two\ncustom properties are added to both of them: `streamID` and `isSpdy`. The first\none indicates on which spdy stream are sitting request and response. Latter one\nis always true and can be checked to ensure that incoming request wasn't\nreceived by HTTPS callback.\n\n### Push streams\n\nIt is possible to initiate 'push' streams to send content to clients _before_ the client requests it.\n\n```javascript\nspdy.createServer(options, function(req, res) {\n  var headers = { 'content-type': 'application/javascript' };\n  res.push('/main.js', headers, function(err, stream) {\n    if (err) return;\n\n    stream.end('alert(\"hello from push stream!\");');\n  });\n\n  res.end('<script src=\"/main.js\"></script>');\n}).listen(443);\n```\n\nPush is accomplished via the `push()` method invoked on the current response object (this works for express.js response objects as well).  The format of the `push()` method is:\n\n`.push('full or relative url', { ... headers ... }, callback)`\n\nYou can use either full ( `http://host/path` ) or relative ( `/path` ) urls with\n`.push()`. `headers` are the same as for regular response object. `callback`\nwill receive two arguments: `err` (if any error is happened) and `stream`\n(stream object have API compatible with a\n[net.Socket](http://nodejs.org/docs/latest/api/net.html#net.Socket) ).\n\n### Options\n\nAll options supported by\n[tls](http://nodejs.org/docs/latest/api/tls.html#tls.createServer) are working\nwith node-spdy. In addition, `maxStreams` options is available. it allows you\ncontrolling [maximum concurrent streams][http://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft2#TOC-SETTINGS]\nprotocol option (if client will start more streams than that limit, RST_STREAM\nwill be sent for each additional stream).\n\n#### Contributors\n\n* [Fedor Indutny](https://github.com/indutny)\n* [Chris Strom](https://github.com/eee-c)\n* [François de Metz](https://github.com/francois2metz)\n* [Ilya Grigorik](https://github.com/igrigorik)\n\n#### LICENSE\n\nThis software is licensed under the MIT License.\n\nCopyright Fedor Indutny, 2012.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the\nfollowing conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\nNO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\nUSE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "spdy@1.2.1",
  "_from": "spdy@~1.2.1"
}
