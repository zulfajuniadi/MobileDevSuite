(function(env) {
    var qr = require('qr-element');
    var _ = require('underscore')._;
    var fs = require('fs');
    var houston = require('nhouston');
    var path = require('path');
    var range_check = require('range_check');
    var rootPath = path.dirname(fs.realpathSync(__filename));
    var port = require('portastic');
    var livereload = require('livereload');
    var interfaceAddresses = require('interface-addresses')();

    var lib          = path.join(rootPath, 'node_modules', 'weinre', 'lib')
    var node_modules = path.join(rootPath, 'node_modules')

    require(path.join(node_modules, 'coffee-script'));

    var Injector;

    var injector = function(options){
        var options = options || {};
        var defaultOptions = {
            scripts : [],
            webroot : __dirname + '/public',
            port : 3002
        };

        this.options = _.extend({}, defaultOptions, options);

        console.log(this.options);
    };

    function injectString(source, after, string) {
        var start = source.substring(0, source.indexOf(after) + after.length);
        var end = source.substring(source.indexOf(after) + after.length,  source.length);
        return start + string + end;
    }

    var getNetworkIP = function(cb){

        var addresses = interfaceAddresses || {};
        var theAddress = '127.0.0.1';

        _.each(interfaceAddresses, function(ip){
            if(range_check.in_range(ip, ['10.0.0.0/8', '192.168.0.0/16', '172.16.0.0/12'])){
                var addressSub = theAddress.substring(0,3);
                var ipSub = ip.substring(0,3);
                if(ipSub === '192') {
                    theAddress = ip;
                } else if (addressSub === '127') {
                    if(ipSub === '172' && addressSub === '10.') {
                        theAddress = ip;
                    } else {
                        theAddress = ip;
                    }
                }
            }
        })
        return theAddress;
    }

    injector.prototype.handleJS = function(req, res) {
        if(fs.existsSync(req.file)) {
            return res.end(fs.readFileSync(req.file));
        }
        else {
            var filename = __dirname + '/public/' + req.url.split('/').pop();
            console.log(filename)
            if(fs.existsSync(filename))
                return res.end(_.template(new String(fs.readFileSync(filename)).toString(), Injector.options.jsvars));
            else
                res.error(404, 'Not found');
        }
    }

    injector.prototype.handleHTML = function(req, res) {
        var fileStr = new String(fs.readFileSync(req.file));
        if(fileStr.indexOf('</head>') > -1) {
            var scripts = Injector.options.scripts;
            var scriptString = '';
            scripts.forEach(function(script){
                scriptString += "<script src=\"" + script + "\"></script>\r";
            })

            return res.end(injectString(fileStr, '<head>', scriptString));
        }
        return res.end(fileStr.toString());
    }

    injector.prototype.start = function() {
        houston.extend({
            html: this.handleHTML,
            js: this.handleJS,
        })

        var server = houston.createServer({
            path: this.options.webroot,
            port: this.options.port
        });
        return server;
    }

    exports.start = function(options, callback) {
        var scripts = [];
        var ports = {};
        var services = [];
        options.name = options.name.replace(' ', '-');
        
        /* startup livereload */

        port.find({
            min : 41300,
            max : 41309,
            retrieve : 1
        }, function(err, data){
            if(data) {
                var server = livereload.createServer({
                    port : data
                });
                server.watch(options.webroot);
                services.push({
                    instance : server.server.httpServer,
                    port : ports.lr = data,
                    name : 'Live Reload',
                });
                console.log('Livereload running on port ' + data);
            }
        });


        /* startup wiener */

        port.find({
            min : 41310,
            max : 41319,
            retrieve : 1
        }, function(err, data){
            if(data) {
                var server = require(path.join(lib, '/weinre')).run({
                    httpPort : data,
                    boundHost : '0.0.0.0',
                    debug : true,
                    verbose : true,
                    readTimeout : 5,
                    deathTimeout : 15
                });
                services.push({
                    instance : server,
                    port : ports.wr = data,
                    name : 'Weinre'
                });
                console.log('Weinre Debugger running on port ' + data);
            }
        });


        /* startup webserver */

        port.find({
            min : 41320,
            max : 41329,
            retrieve : 1
        }, function(err, data){
            if(data) {
                var ip = getNetworkIP();
                scripts.push('http://' + ip + ':' + data + '/livereload.js#' + options.name);
                scripts.push('http://' + ip + ':' + data + '/MobileDevSuite.js#' + options.name);
                scripts.push('http://' + ip + ':' + ports.wr + '/target/target-script-min.js#anonymous');
                options.jsvars = options.jsvars || {};
                options.jsvars.IP = ip;
                options.jsvars.LRPORT = ports.lr;
                options.scripts = scripts;
                options.port = ports.we = data;

                Injector = new injector(options);
                console.log('Web Server running on port ' + data);

                var server = Injector.start();


                // default canvas rendering
                var qrcode = qr(('http://' + ip + ':' + ports.we), {
                    width: 240,
                    height: 240
                });

                services.push({
                    instance : server,
                    port : ports.we = data,
                    name : 'Web Server',
                    qr : qrcode
                });

                callback.call(window, services.map(function(service){
                    service.url = 'http://' + ip + ':' + service.port;
                    return service;
                }));
            }
        });
    }

    exports.stop = function() {

    }
}).call(this);